//----------------------------------------------
//
//        Sketch Generated by Visuino
//              www.visuino.com
//          Version 7.8.2.261
//
//------------------ Source --------------------
//
// 1.visuino
//
//----------------------------------------------

#define VISUINO_ARDUINO_UNO

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_FormattedSerial.h>
#include <Mitov_LogicFlipFlops.h>

// Arduino Board Declarations

namespace BoardDeclarations
{
Mitov::ArduinoDigitalOutputChannel<2> ArduinoDigitalChannel_2( false, false );
Mitov::ArduinoDigitalOutputChannel<3> ArduinoDigitalChannel_3( false, false );
Mitov::ArduinoDigitalInputChannel<7, false> ArduinoDigitalChannel_7( false );
} // BoardDeclarations

// Declarations

namespace Declarations
{
Mitov::TFlipFlop<Mitov::FlipFlop_Normal> TFlipFlop1;
} // Declarations

// Type Converters

namespace TypeConverters
{
Mitov::Convert_BinaryToClock Converter0;
Mitov::Convert_BinaryToClock Converter1;
} // TypeConverters

// Pin Call Declarations

namespace PinCalls
{
void PinCallerReceive1( void *_Data );
void PinCallerReceive2( void *_Data );
void PinCallerReceive3( void *_Data );
void PinCallerReceive4( void *_Data );
void PinCallerReceive5( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive2( void *_Data )
{
  TypeConverters::Converter0.Convert( _Data, PinCallerReceive1 );
}

void PinCallerReceive1( void *_Data )
{
  Declarations::TFlipFlop1.SetInputPin_o_Receive( _Data );
}
void PinCallerReceive4( void *_Data )
{
  TypeConverters::Converter1.Convert( _Data, PinCallerReceive3 );
}

void PinCallerReceive3( void *_Data )
{
  Declarations::TFlipFlop1.ResetInputPin_o_Receive( _Data );
}
void PinCallerReceive5( void *_Data )
{
  BoardDeclarations::ArduinoDigitalChannel_7.DigitalInputPin_o_Receive( _Data );
}

} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::ArduinoDigitalChannel_2.OutputPin().SetCallback( PinCalls::PinCallerReceive2 );
  BoardDeclarations::ArduinoDigitalChannel_3.OutputPin().SetCallback( PinCalls::PinCallerReceive4 );
  Declarations::TFlipFlop1.OutputPin().SetCallback( PinCalls::PinCallerReceive5 );

  BoardDeclarations::ArduinoDigitalChannel_2.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_3.SystemInit();

  BoardDeclarations::ArduinoDigitalChannel_2.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_3.SystemStart();
  Declarations::TFlipFlop1.SystemStart();
}

// The loop function is called in an endless loop
void loop()
{
  unsigned long A_Current_Microseconds = micros();

  BoardDeclarations::ArduinoDigitalChannel_2.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_3.SystemLoopBegin( A_Current_Microseconds );
}
